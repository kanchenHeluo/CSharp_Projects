<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNet.Identity.EntityFramework</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNet.Identity.Entity.EntityRole">
            <summary>
                Represents a Role entity
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.EntityRole.#ctor">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.EntityRole.#ctor(System.String)">
            <summary>
                Constructor
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="T:Microsoft.AspNet.Identity.Entity.EntityRole`2">
            <summary>
                Represents a Role entity
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TUserRole"></typeparam>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.EntityRole`2.#ctor">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityRole`2.Users">
            <summary>
                Navigation property for users in the role
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityRole`2.Id">
            <summary>
                Role id
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityRole`2.Name">
            <summary>
                Role name
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityRoleStore`3.AutoSaveChanges">
            <summary>
                If true will call SaveChanges after CreateAsync/UpdateAsync/DeleteAsync
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.EntityRoleStore`3.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find a role by id
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.EntityRoleStore`3.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find a role by name
            </summary>
            <param name="name"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.EntityRoleStore`3.Dispose">
            <summary>
                Dispose the store
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.Email">
            <summary>
                Email
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.EmailConfirmed">
            <summary>
                True if the email is confirmed, default is false
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.PasswordHash">
            <summary>
                The salted/hashed form of the user password
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.SecurityStamp">
            <summary>
                A random value that should change whenever a users credentials have changed (password changed, login removed)
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.PhoneNumber">
            <summary>
                PhoneNumber for the user
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.PhoneNumberConfirmed">
            <summary>
                True if the phone number is confirmed, default is false
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.TwoFactorEnabled">
            <summary>
                Is two factor enabled for the user
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.LockoutEnd">
            <summary>
                DateTime in UTC when lockout ends, any time in the past is considered not locked out.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.LockoutEnabled">
            <summary>
                Is lockout enabled for this user
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.AccessFailedCount">
            <summary>
                Used to record failures for the purposes of lockout
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.Roles">
            <summary>
                Navigation property for user roles
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.Claims">
            <summary>
                Navigation property for user claims
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.EntityUser`4.Logins">
            <summary>
                Navigation property for user logins
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.AutoSaveChanges">
            <summary>
                If true will call SaveChanges after CreateAsync/UpdateAsync/DeleteAsync
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find a user by id
            </summary>
            <param name="userId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find a user by name
            </summary>
            <param name="userName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Set the password hash for a user
            </summary>
            <param name="user"></param>
            <param name="passwordHash"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetPasswordHashAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Get the password hash for a user
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.HasPasswordAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Returns true if the user has a password set
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetClaimsAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Return the claims for a user
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
                Add a claim to a user
            </summary>
            <param name="user"></param>
            <param name="claim"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
                Remove a claim from a user
            </summary>
            <param name="user"></param>
            <param name="claim"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Returns whether the user email is confirmed
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Set IsConfirmed on the user
            </summary>
            <param name="user"></param>
            <param name="confirmed"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Set the user email
            </summary>
            <param name="user"></param>
            <param name="email"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetEmailAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Get the user's email
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.FindByEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                FindByLoginAsync a user by email
            </summary>
            <param name="email"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Returns the DateTimeOffset that represents the end of a user's lockout, any time in the past should be considered
                not locked out.
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.SetLockoutEndDateAsync(`0,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Locks a user out until the specified end date (set to a past date, to unlock a user)
            </summary>
            <param name="user"></param>
            <param name="lockoutEnd"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Used to record when an attempt to access the user has failed
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Used to reset the account access count, typically after the account is successfully accessed
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Returns the current number of failed access attempts.  This number usually will be reset whenever the password is
                verified or the account is locked out.
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Returns whether the user can be locked out.
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Sets whether the user can be locked out.
            </summary>
            <param name="user"></param>
            <param name="enabled"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Set the user's phone number
            </summary>
            <param name="user"></param>
            <param name="phoneNumber"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Get a user's phone number
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Returns whether the user phoneNumber is confirmed
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Set PhoneNumberConfirmed on the user
            </summary>
            <param name="user"></param>
            <param name="confirmed"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Add a user to a role
            </summary>
            <param name="user"></param>
            <param name="roleName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Remove a user from a role
            </summary>
            <param name="user"></param>
            <param name="roleName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetRolesAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Get the names of the roles a user is a member of
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Returns true if the user is in the named role
            </summary>
            <param name="user"></param>
            <param name="roleName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Set the security stamp for the user
            </summary>
            <param name="user"></param>
            <param name="stamp"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetSecurityStampAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Get the security stamp for a user
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Set whether two factor authentication is enabled for the user
            </summary>
            <param name="user"></param>
            <param name="enabled"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Gets whether two factor authentication is enabled for the user
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.InMemoryUserStore`7.Dispose">
            <summary>
                Dispose the store
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.RoleStore`2.AutoSaveChanges">
            <summary>
                If true will call SaveChanges after CreateAsync/UpdateAsync/DeleteAsync
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.RoleStore`2.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find a role by id
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.RoleStore`2.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find a role by name
            </summary>
            <param name="name"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.RoleStore`2.Dispose">
            <summary>
                Dispose the store
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.UserStore`2.AutoSaveChanges">
            <summary>
                If true will call SaveChanges after CreateAsync/UpdateAsync/DeleteAsync
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.UserStore`2.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find a user by id
            </summary>
            <param name="userId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.UserStore`2.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find a user by name
            </summary>
            <param name="userName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.UserStore`2.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Set the password hash for a user
            </summary>
            <param name="user"></param>
            <param name="passwordHash"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.UserStore`2.GetPasswordHashAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Get the password hash for a user
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.UserStore`2.HasPasswordAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Returns true if the user has a password set
            </summary>
            <param name="user"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.Identity.Entity.UserStore`2.Dispose">
            <summary>
                Dispose the store
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Identity.Entity.User.PasswordHash">
            <summary>
                The salted/hashed form of the user password
            </summary>
        </member>
    </members>
</doc>
